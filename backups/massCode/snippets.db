{"name":"Управление репозиторием","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git init                                       # Создает новый проект в текущей директории.\r\ngit init путь_к_директории                     # Создает новый проект в указанной директории.\r\n\r\ngit clone адрес_репозитория                    # Клонирует удаленный репозиторий в текущую директорию.\r\ngit clone адрес_репозитория путь_к_директории  # Клонирует удаленный репозиторий в указанную директорию.\r\n\r\ngit remote -v                                  # Показывает список удалённых репозиториев, связанных с локальным.\r\ngit remote add origin url_репозитория          # Добавляет удалённый репозиторий с сокращенным именем origin, с указанным URL.\r\ngit remote rm origin                           # Удаляет привязку удалённого репозитория.\r\ngit remote show origin                         # Получает данные об удалённом репозитории с сокращенным именем origin.\r\n\r\ngit fetch origin                               # Скачивает все ветки с удаленного репозитория с сокращенным именем origin, но не сливает со своими ветками.\r\ngit fetch origin имя_ветки                     # Скачивает указанную ветку, но не сливает ее с имеющейся.\r\n\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120181673},"updatedAt":{"$$date":1638249871689},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"0Ov4ceL41lVdu4TK"}
{"name":"Прочие команды","folderId":"MsSQGFOv5","content":[{"label":"Fragment 1","language":"powershell","value":"команда ; команда   # Осуществляет последовательное выполнение команд.\r\nкоманда && команда  # Осуществляет последовательное выполнение команд, если предыдущая была выполнена успешно.\r\nкоманда || команда  # Осуществляет последовательное выполнение команд, если предыдущая была не выполнена.\r\n\r\nfind                # Осуществляет поиск в файловой системе, файлах и папках.\r\n\r\npwd                 # Отображает текущий каталог. Сокращение от Print working directory.\r\n\r\nclear               # Очищает окно терминала от сообщений.\r\n\r\nhistory             # Отображает список команд, вводимых ранее."}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638102278978},"updatedAt":{"$$date":1638447911842},"_id":"7Hxz6DxHszApe8Oo","folder":{"id":"MsSQGFOv5","name":"Terminal commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Terminal commands","folderId":"MsSQGFOv5","content":[{"label":"Управления файловой структурой","language":"text","value":"ls\r\n  Выводит содержимое в директории. Сокращение от List. \r\n  Пример - ls\r\nls -l\r\n  Выводит содержимое в директории в виде списка. \r\n  Пример - ls -l\r\nls -a\r\n  Выводит содержимое в директории, в том числе скрытые файлы. \r\n  Пример - ls -a\r\n\r\ncd\r\n  Переходит с текущей директории на указанную. Сокращение от Change Directory.\r\n  Пример - cd имя_директории/\r\ncd ..\r\n  Переходит в директорию на уровень выше.\r\n  Пример - cd ..\r\ncd ~\r\n  Меняет директорию на root.\r\n  Пример - cd ~\r\ncd -\r\n  Возвращает к предыдущей директории.\r\n  Пример - cd -\r\n  \r\n\r\ncat\r\n  Команда двойного назначения. Показывает на экране что содержит файл. Также помещает несколько переданных подряд файлов в один. Сокращение от Concatenate.\r\n  Пример 1 - cat имя_файла.расширение\r\n  Пример 2 - cat имя_файла_1.расширение имя_файла_2.расширение\r\n  Пример 3 - cat имя_файла_1.расширение имя_файла_2.расширение > имя_файла_3.расширение\r\n\r\nmkdir\r\n  Создаёт новую директорию. Сокращение от Make Directory.\r\n  Пример - mkdir имя_директории\r\n\r\ntouch\r\n  Создаёт пустой файл.\r\n  Пример 1 - touch имя_файла.расширение\r\n>\r\n  Создаёт пустой файл.\r\n  Пример - > имя_директории\r\n\r\necho\r\n  Выводит строку.\r\n  Пример - echo Текст touch имя_файла.расширение\r\n\r\nrm\r\n  Удаляет файлы или директории. Сокращение от Remove.\r\n  Пример - rm имя_файла.расширение\r\nrm -r\r\n  Удаляет рекурсивно директорию.\r\n  Пример - rm -r имя_директории\r\n\r\ncp\r\n  Копирование файлов. Сокращение от Copy.\r\n  Пример - cp имя_файла.расширение новое_имя_файла.расширение\r\ncp -r\r\n  Копирование директорий.\r\n  Пример - cp -r имя_директории имя_директории"}],"tags":[],"isFavorites":false,"isDeleted":true,"createdAt":{"$$date":1637858658047},"updatedAt":{"$$date":1638040421362},"_id":"8Dik0NLYjAIkuEt3","folder":{"id":"MsSQGFOv5","name":"Terminal commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Команды ssh-клиента","folderId":"MsSQGFOv5","content":[{"label":"Fragment 1","language":"text","value":""}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638189141512},"updatedAt":{"$$date":1638189166392},"_id":"8upzUTOJTpjIVu2B","folder":{"id":"MsSQGFOv5","name":"Terminal commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Команды запущенных процессов","folderId":"MsSQGFOv5","content":[{"label":"Fragment 1","language":"powershell","value":"ctrl + c  # Комбинация завершает выполнение любого процесса в терминале Linux.\r\nctrl + z  # Комбинация ставит любой запущенный в консоли процесс на паузу. Снова запустить его можно, введя %."}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638103114713},"updatedAt":{"$$date":1638422583269},"_id":"FPZSTYo7wYsWV7sD","folder":{"id":"MsSQGFOv5","name":"Terminal commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Удаляет изменения из индекса, изменения в рабочей директории остаются.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639300263322},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Git commands","folderId":"MsSQGFOv5","content":[{"label":"Fragment 1","language":"text","value":""}],"tags":[],"isFavorites":false,"isDeleted":true,"createdAt":{"$$date":1637862024853},"updatedAt":{"$$date":1637862032053},"_id":"GU8wvnqpJvoqLZ65","folder":{"id":"MsSQGFOv5","name":"Terminal/Console","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Управление настройками git'а","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git config --list                                 # Просматривает настройки git\r\ngit config --list --local                         # Просматривает локальные настройки git\r\ngit config --list --global                        # Просматривает глобальные настройки git\r\n\r\ngit config --local user.email название_email      # Указывает в локальных настройках имя, которая будет в описании коммита.\r\ngit config --local user.email название_email      # Указывает в локальных настройках электроную почту, которая будет в описании коммита.\r\n\r\ngit config --global user.name имя_пользователя    # Указывает в глобальных настройках имя, которым будут подписаны коммиты.\r\ngit config --global user.email название_email     # Указывает в глобальных настройках электроную почту, которая будет в описании коммита.\r\ngit config --global core.editor путь_к_редактору  # Устанавливает редактор кода\r\ngit config --global alies.c имя_команды           # Создание alies. Своя команда, замена более длинной команде git. \r\n\r\ngit config --unset --local user.name              # Удаляет имя из локальных настроек git\r\ngit config --unset --local user.email             # Удаляет имя из локальных настроек git\r\ngit config --unset --global user.name             # Удаляет имя из глобальных настроек git\r\ngit config --unset --global user.email            # Удаляет имя из глобальных настроек git\r\n\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638108963116},"updatedAt":{"$$date":1639293497603},"_id":"HUj3ALTIBxLvvJtX","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"docBlock","folderId":"bA_1WKs89","content":[{"label":"Snippet","language":"php","value":"<?php\r\n\r\n /**\r\n  * ToDo: Указать что нужно позже сделать сделать \r\n  * Описание класса/метода\r\n  * @author Steelmoorg\r\n  * @param string $value Описание входных параметров функции\r\n  * @return void\r\n  */"},{"label":"Discription","language":"php","value":"<?php\r\n\r\n// @author Steelmoorg                                       # Имя автора кода.\r\n// @category Zend                                           # Имя категории, в которую объединены несколько пакетов.\r\n// @deprecated 1.7                                          # Дескриптор указывает на то, что код устарел. В качестве значения дескриптора указывается версия, начиная с которой код считается устаревшим.\r\n// @example /path/example.php                               # Указывает путь к файлу, содержащему пример использования кода..\r\n// @final none                                              # Дескриптор отмечает методы или свойства, которые не могут быть перегружены в дочерних классах. Также может быть отмечен класс, который не должен быть наследован.\r\n// @global datatype                                         # Дескриптор для декларации глобальных переменных.\r\n// @ignore none                                             # Сообщает phpDocumentor’у, что данный код не следует включать в лист документации.\r\n// @internal комментарий                                    # Значение дискриптора не будет добавлено в файлы документации.\r\n// @license http://www.example.com/License.txt GPL License  # Добавляет ссылку на лицензию, под которой распространяется код.\r\n// @link http://www.example.com Текст ссылки                # Дает возможность добавить ссылку к любому документируемому коду.\r\n// @method returntype описание                              # Используется для описания магического метода __call().\r\n// @name $globalvariablename                                # Дает возможность сослаться на краткое имя глобальной переменной, объявленной с помощью @global.\r\n// @package Zend_Pdf                                        # Указание имени пакета, в который входит данный программный код (файл).\r\n// @param datatype $paramname описание                      # Дескриптор описывает входные параметры для функций и методов классов.\r\n// @return datatype описание                                # Используется для описания данных, возвращаемых функцией или методом класса.\r\n// @see …                                                   # Дескриптор предлагает обратиться к другому, уже существующему докблоку.\r\n// @since v 0.7                                             # Указывает на версию пакета/класса, с которой комментируемый элемент стал доступен.\r\n// @subpackage Name                                         # Используется для объединения нескольких пакетов в один раздел документации.\r\n// @todo Something                                          # Можно описать будущие возможные изменения кода.\r\n// @throws MyException                                      # Указывает тип исключения, который может быть возвращен участком кода.\r\n// @var datatype                                            # Указывает тип свойства класса.\r\n// @version Version 1.1                                     # Текущая версия реализации документируемого кода."}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1637166839767},"updatedAt":{"$$date":1638347858556},"_id":"ORPuRMypJw5COIj7","folder":{"id":"bA_1WKs89","name":"PHP","open":false,"defaultLanguage":"text","children":[]},"tagsPopulated":[]}
{"name":"Работа с HL-блоками","folderId":"-2irHeXbe","content":[{"label":" Добавление записи в HL-блок","language":"php","value":"<?\r\n\r\nuse Bitrix\\Main\\Loader; \r\n\r\nLoader::includeModule(\"highloadblock\"); \r\n\r\nuse Bitrix\\Highloadblock as HL; \r\nuse Bitrix\\Main\\Entity;\r\n\r\n$hlbl = 1; // Указываем ID нашего highloadblock блока к которому будет делать запросы.\r\n$hlblock = HL\\HighloadBlockTable::getById($hlbl)->fetch(); \r\n\r\n$entity = HL\\HighloadBlockTable::compileEntity($hlblock); \r\n$entity_data_class = $entity->getDataClass(); \r\n\r\n   // Массив полей для добавления\r\n   $data = array(\r\n      \"UF_TYPE\"=>'33',\r\n      \"UF_COUNT\"=>'1',\r\n      \"UF_DATA\"=>date(\"d.m.Y\")\r\n   );\r\n\r\n   $result = $entity_data_class::add($data);"},{"label":"Оновление записи в HL-блок","language":"php","value":"<?\r\n\r\nuse Bitrix\\Main\\Loader; \r\n\r\nLoader::includeModule(\"highloadblock\"); \r\n\r\nuse Bitrix\\Highloadblock as HL; \r\nuse Bitrix\\Main\\Entity;\r\n\r\n$hlbl = 1; // Указываем ID нашего highloadblock блока к которому будет делать запросы.\r\n$hlblock = HL\\HighloadBlockTable::getById($hlbl)->fetch(); \r\n\r\n$entity = HL\\HighloadBlockTable::compileEntity($hlblock); \r\n$entity_data_class = $entity->getDataClass(); \r\n\r\n\r\n   // Массив полей для обновления\r\n   $data = array(\r\n      \"UF_TYPE\"=>'33',\r\n      \"UF_COUNT\"=>'1',\r\n      \"UF_DATA\"=>date(\"d.m.Y\")\r\n   );\r\n\r\n   $result = $entity_data_class::update(\"77\"], $data); // где 77 -  id обновляемой записи \r\n\r\n"},{"label":" Удаление записи в HL-блок","language":"php","value":"<?\r\n\r\nuse Bitrix\\Main\\Loader; \r\n\r\nLoader::includeModule(\"highloadblock\"); \r\n\r\nuse Bitrix\\Highloadblock as HL; \r\nuse Bitrix\\Main\\Entity;\r\n\r\n$hlbl = 1; // Указываем ID нашего highloadblock блока к которому будет делать запросы.\r\n$hlblock = HL\\HighloadBlockTable::getById($hlbl)->fetch(); \r\n\r\n$entity = HL\\HighloadBlockTable::compileEntity($hlblock); \r\n$entity_data_class = $entity->getDataClass(); \r\n\r\n$entity_data_class::Delete(\"77\");  // где 77 -  id удаляемой записи \r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638365847756},"updatedAt":{"$$date":1638366220569},"_id":"RxOCzkX5b02tFEUe","folder":{"id":"-2irHeXbe","name":"Bitrix","open":false,"defaultLanguage":"text","children":[]},"tagsPopulated":[]}
{"name":"Команды файловой системы","folderId":"MsSQGFOv5","content":[{"label":"Управления файловой структурой","language":"powershell","value":"whoami                                       # Выводит список пользователей. Сокращение от Who am I.\r\nsu -l имя_пользователя                       # Авторизация под указанным пользователем. Сокращение от Switch user.\r\n\r\nls                                           # Выводит содержимое в директории. Сокращение от List. \r\nls -l                                        # Выводит содержимое в директории в виде списка.\r\nls -a                                        # Выводит содержимое в директории, в том числе скрытые файлы.\r\n\r\ncd имя_директории/                           # Переходит с текущей директории на указанную. Сокращение от Change Directory.\r\ncd ..                                        # Переходит в директорию на уровень выше.\r\ncd ~                                         # Меняет директорию на root.\r\ncd -                                         # Возвращает к предыдущей директории.\r\n  \r\ncat имя_файла                                # Команда двойного назначения. Показывает на экране что содержит файл. Сокращение от Concatenate.\r\n\r\nmkdir имя_директории/                        # Создаёт новую директорию. Сокращение от Make Directory.\r\n\r\ntouch имя_файла                              # Создаёт пустой файл.\r\n> имя_файла                                  # Создаёт пустой файл.\r\n\r\necho Текст touch имя_файла                   # Выводит строку.\r\n\r\ncp имя_файла новое_имя_файла                 # Копирование файлов. Сокращение от Copy.\r\ncp -r имя_директории/ новое_имя_директории/  # Копирование директорий.\r\n\r\nmv имя_файла новое_имя_файла                 # Перемещение файлов. Сокращение от Move.\r\nmv -r имя_директории/ новое_имя_директории/  # Перемещение директорий.\r\n\r\nrm имя_файла                                 # Удаляет файлы или директории. Сокращение от Remove.\r\nrm -r имя_директории/                        # Удаляет рекурсивно директорию.\r\n  \r\nln путь_к_файлу необязательное_имя_файла     # Создаёт программные ссылки на файлы. Сокращение от Link.\r\n\r\nunzip                                        # "}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638040447663},"updatedAt":{"$$date":1638423474955},"folder":{"id":"MsSQGFOv5","name":"Terminal commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"Wxm6Cdn2jZdwjGSz"}
{"name":"Удаленный репозиторий","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git push origin имя_ветки                          # Отправляет в удалённый репозиторий с сокращенным именем origin указанную ветку.\r\ngit push -u origin имя_ветки                       # Отправляет в удалённый репозиторий с сокращенным именем origin указанную ветку, и делает ее отслеживаемой с указанной удаленной веткой.\r\ngit push origin :старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в удаленном репозитории.\r\n\r\ngit pull origin                                    # Вливает изменения со всех веток с удалённого репозитория.\r\ngit pull origin имя_ветки                          # Вливает изменения с указанной ветки с удалённого репозитория."}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1639064986781},"updatedAt":{"$$date":1639065054196},"_id":"ZfMX09KlbHz3SN6R","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Создание заказа - Creating order","folderId":"-2irHeXbe","content":[{"label":"Fragment 1","language":"php","value":""}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1637132070568},"updatedAt":{"$$date":1638340828070},"_id":"uRoAIlNlmyfN4yNA","folder":{"id":"-2irHeXbe","name":"Bitrix","open":false,"defaultLanguage":"text","children":[]},"tagsPopulated":[]}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff HEAD~                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639295190521},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639307967009},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Пере.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308104382},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308309859},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает те.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308311664},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает теку.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308312387},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308312872},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую в.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308314042},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308314448},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308316992},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку тек.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308317366},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку теку.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308464025},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308464494},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308466234},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, об.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308469771},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308489060},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308490992},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет теку.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308491413},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущу.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308496149},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308496633},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директо.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308496960},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директори.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308500338},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308500958},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308502154},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из тек.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308505033},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из теку.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308505704},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из текущего .\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308506173},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из текущего HE.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308507110},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308508070},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308508524},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308551056},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308598640},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный  коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308607252},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308611649},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущую рабочую директорию из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308612271},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308616952},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий ин из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308679506},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308680511},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущую рабочую директорию из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308681170},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит, обновляет текущий индек из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308681462},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит обновляет текущий индек из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308688862},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит, обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308696456},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\n\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308697190},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308699411},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset  хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308706062},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308708801},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308709301},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308712211},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\n\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308722595},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308725975},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset -                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308727589},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308731485},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --ьг                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308732014},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308733012},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mix                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308733618},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                         # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308734431},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308735072},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixedхеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308737300},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308741705},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset @~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308742247},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset ~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308747216},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset HEAD~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep @~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308835771},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset HEAD~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep ~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308836706},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset HEAD~                       # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep HEAD~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308839837},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset имя_файла                # Антипод git add имя_файла.\r\ngit reset HEAD~                     # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep HEAD~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308840680},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset HEAD~                     # Передвигает HEAD на указынное количество коммитов назад, рабочая директория остается без изменений, индекс принимает состояние предыдущего коммита.\r\ngit reset --keep HEAD~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308844126},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset --keep HEAD~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\ngit reset --soft @~                # Передвигает HEAD на указынное количество коммитов назад, но в рабочей директории и индексе оставляет все изменения\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639308845683},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff ~                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308855876},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff                                      # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308926673},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff [ti]                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308927372},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff []                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308929428},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff                                      # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308930473},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff х                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308930829},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хе                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308931501},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                                     # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308932000},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию и коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308932651},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию и ука коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308934923},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию и у коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308949716},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию и  коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308950462},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию  коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308951316},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308953016},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указа коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308953389},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанно коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308954668},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммит, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308955651},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитот, на который указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308956654},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитот указывает HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308958938},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитот HEAD.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308960310},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитот.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308960637},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммито.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308960979},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308963133},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает указафайл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308963944},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает указанныйфайл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308976243},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308977627},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\ngit diff имя_файла                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308978093},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff имя_файла                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308988098},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff имя_файла                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639308990334},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff x                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309244300},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff xn                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309609458},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff xnj                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309609825},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff                                  # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309610285},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff ч                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309611840},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309613463},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309614066},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравни                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309617325},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309618912},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем                                  # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309620254},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309621113},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309625601},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309626396},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем_                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309627267},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем_сравниваем                                 # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309627625},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем_сравниваем                                # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309629828},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем_сравниваем            # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309630805},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff                                           # Сравнивает рабочую директорию c индексом.\r\n..git diff что_сравниваем с_чем_сравниваем           # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309632285},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff что_сравниваем с_чем_сравниваем           # Сравнивает указанный файл из рабочей директории и индекс.\r\n..git diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309632628},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\n..git diff что_сравниваем с_чем_сравниваем           # Сравнивает указанный файл из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309634881},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанный файл из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309635828},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309637472},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309663712},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309666748},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит из рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309668304},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммитз рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309670547},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит рабочей директории и индекс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309671963},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309673385},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309675936},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309676619},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"уgit status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309676916},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309678018},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммитыуказанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309679368},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309738385},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309738709},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты вуказанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309743211},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанные файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309747221},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанны файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309747843},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файл, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309749490},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветку или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309749896},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммит .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309752319},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или к .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309775216},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309778653},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309779247},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309779790},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммита.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309782029},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309783478},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309784022},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или сс.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309792786},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или ссы.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309793357},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или ссыл.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309794911},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или ссылка.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309796843},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или с.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309797510},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или .\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309802061},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммита.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309802468},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309803852},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309804643},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хе           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309865811},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309869847},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_ко           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309870175},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309872301},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                            # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309873429},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                              # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309876503},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309876859},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309877339},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую ди.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309884756},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую дир.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309885670},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую дире.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309886028},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директори.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309886480},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директори..\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309887543},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директори.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309888320},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию .\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309889411},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с .\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309890392},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репо.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309890875},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309893341},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309894940},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639309896463},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310081460},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                  # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310083330},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310084839},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                          # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310085492},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310085916},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с erfрепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310086628},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с erfpfyysvрепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310096364},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310097501},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с урепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310098031},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанрепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310098578},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указаннырепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310099400},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указаннымрепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310099698},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указаннымрепозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310099928},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным репозиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310100052},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным позиторием коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310101796},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным м коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310103994},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным  коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310104770},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммита.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310105081},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммит.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310105469},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммита.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310108433},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммит.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310108942},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с репозиторием коммитом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310111573},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с коммитом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310112454},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим коммитом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310113816},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим by.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310116357},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим bylt.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310173805},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим byltr.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310174255},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим .\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310174738},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим ин.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310175252},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индек.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310176181},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки     # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310176851},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки       # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310177442},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                      # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310217731},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                      # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310219946},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                      # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310224029},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                            # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310225268},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                            # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310225955},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                               # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310226643},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                         # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310227405},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                               # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310228180},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем           # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310228935},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                           # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310229882},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                               # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310230554},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                           # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310231313},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}         # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310232116},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                         # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310233011},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                       # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310233696},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                                # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310234675},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                            # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310235355},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита                # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310236162},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                                # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310236831},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD                  # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310238470},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                             # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310239169},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                       # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310239930},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                             # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310240657},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                    # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310241659},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                             # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310242417},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                          # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310243141},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                     # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310243842},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                          # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310244555},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита              # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310245443},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла                 # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310246424},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                      # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310247126},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310247919},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310248993},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310249880},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                              # Влить в ветку, в которой находимся, данные из указанной ветки"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310250457},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                      # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310251666},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                                # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310252932},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                         # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310254456},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310255354},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310258592},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310380601},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --с        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310386216},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --сф        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310387193},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --сфсрув        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310387706},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310388794},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310390546},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310391961},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает nt.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310394260},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает ntreo.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310399168},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает .\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310399955},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает теку.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310400796},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие .\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310402078},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие ин.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310403076},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и ком.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310403728},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310405877},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текурабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310406640},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию с текущим индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310418553},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию с  индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310419472},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию с индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310422366},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310422984},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текурабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310424289},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущурабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310433187},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию с указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310433839},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию  указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310436466},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанным коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310439310},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанны коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310439699},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммитом.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310441410},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff что_сравниваем с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310441733},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff им с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310443333},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310625066},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310626174},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки с_чем_сравниваем        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310626737},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки         # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310627965},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310633783},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки        # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310635078},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки          # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310637042},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                  # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310639521},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                   # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310640457},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных файлах, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310641060},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветка, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310641385},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках, ветках или коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310647200},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310647539},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310656649},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff имя имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310658825},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff им имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310679172},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff и имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310679867},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff  имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310680191},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff х имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310680632},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хе имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310682487},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310683361},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                    # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310683827},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310686372},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных ком.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310688548},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммита.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310691968},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310692856},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310693323},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff мия хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310696262},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff м хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310698788},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff  хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310700114},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310700439},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310701092},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки  хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310701682},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки и хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310702958},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки им хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310703362},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310704295},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310706078},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310706758},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла                # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310711009},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла               # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310713577},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных коммитах.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310714791},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветка.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310715984},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310723118},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для .\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310723474},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указа.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310724923},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанны.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310726310},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных .\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310726976},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных фай.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310727551},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310728978},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310729601},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310779386},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файл                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310783411},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310784670},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310785058},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с  и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310787537},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с у и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310839021},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с ука и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310839579},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с указанн и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310840248},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с указанным и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310841321},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с указанным ком и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310842522},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с указанным коммито и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310843970},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию с указанным коммитом и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310845170},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию  указанным коммитом и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310845778},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанным коммитом и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310849927},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммитом и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310850564},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит и указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310853456},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит  указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310854440},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанный коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310855765},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанн коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310856821},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного коммит.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310859060},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного к.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310860367},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310862498},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\ngit reset --keep HEAD~                # Передвигает HEAD на указынное количество коммитов назад, сбрасывает индекс, но в рабочей директории оставляет изменение, если файл с изменениями между коммитами менялся, переключение не произойдёт.\r\n\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639310928807},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\n\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639310932761},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639310933466},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\n\r\ngit revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\ngit revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\ngit tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\ngit tag -d v1.0.0                  # Удаляет тег с указанным именем\r\ngit tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639310934398},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Индекс и коммиты","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git add .                          # Добавляет в индекс все новые, изменённые, удалённые файлы из текущей директории и её поддиректорий.\r\ngit add имя_файла                  # Добавляет в индекс указанный изменненый, удаленный или новый файл.\r\ngit add -i                         # Запускает интерактивную оболочку для добавления в индекс только выбранных файлов.\r\n\r\ngit commit -m \"сообщение\"          # Коммитит проиндексированные изменения и добавляет сообщение.\r\ngit commit -c хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита с редактированием.\r\ngit commit -С хеш_коммита          # Коммитит проиндексированные изменения, описание и информация об авторе берется из указанного коммита без редактирования.\r\ngit commit --amend -m \"сообщение\"  # Перемещает ветку на коммит назад, не обновляя рабочую директорию с индексом и на их основе создает новый коммит. Предыдущий коммит уходит из ветки. \r\n\r\ngit reset                          # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset хеш_коммита              # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --mixed                  # Передвигает текущую ветку на текущий коммит и обновляет текущий индек из текущего HEAD.\r\ngit reset --mixed хеш_коммита      # Передвигает текущую ветку на указанный коммит и обновляет текущий индек из указанного HEAD.\r\ngit reset --hard                   # Передвигает текущую ветку на текущий коммит и обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --hard хеш_коммита       # Передвигает текущую ветку на указанный коммит и обновляет рабочую директорию вместе с индексом из указанного коммита.\r\ngit reset --hard ORIG_HEAD         # Перемещает ветку на предыдущий коммит, после reset.\r\ngit reset --soft                   # Передвигает текущую ветку на текущий коммит и не обновляет рабочую директорию вместе с индексом из текущего HEAD.\r\ngit reset --soft хеш_коммита       # Передвигает текущую ветку на указанный коммит и не обновляет рабочую директорию вместе с индексом из указанного коммита.\r\n\r\n\r\n      git revert HEAD --no-edit          # Создает новый коммит, отменяющий изменения последнего коммита без запуска редактора сообщения.\r\n      git revert хеш_коммита --no-edit   # Создает новый коммит, отменяющий изменения, внесённые коммитом с указанным хешем.\r\n\r\n      git tag v1.0.0                     # Создает тег с указанным именем на коммите, на который указывает HEAD\r\n      git tag -d v1.0.0                  # Удаляет тег с указанным именем\r\n      git tag -n                         # Показывает все теги, и по 1 строке сообщения коммитов, на которые они указывают"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120143442},"updatedAt":{"$$date":1639310935322},"_id":"FfJZX9kRHFMx1sli","folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[]}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639310949728},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313840851},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313852920},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313854073},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                             #  Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313855536},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313857306},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном коммите или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313858222},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном фа или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313859074},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном фай или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313863521},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите или ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313863999},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле или ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313865062},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313873394},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313876045},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313941021},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313943206},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313944157},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --gr\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313946050},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313946812},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313947397},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313951698},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313955118},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                      \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313956986},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313961812},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        #\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313962122},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313963322},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Gjrf\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313963913},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313965017},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Вы\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313965423},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Выводит\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313966277},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313967318},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313968472},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313970186},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313971556},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где в\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313977975},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть сло\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313978723},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть \r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313980891},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313981681},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое слово\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313982984},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое слово в описании\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313984634},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое слово в описании.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313986655},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое слово в описании ко.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313987245},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где есть искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313992455},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где прис искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313993587},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где прису искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639313999672},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314000250},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314160620},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -з                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314168552},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314171102},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314172279},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314172612},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                     # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314175823},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314176382},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314177137},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314184738},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке b.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314190799},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314192653},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314194172},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и и.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314194673},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314195249},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в ни.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314197286},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314197709},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314198240},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314200314},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314203498},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314205040},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p                                       # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314225560},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                                      # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314228553},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                                     # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314228892},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в текущей ветке и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314231562},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в них.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314232526},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\n\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314246192},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314249567},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314252401},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314254663},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314258393},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                           # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314260824},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314261894},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314262361},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314271204},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\nпше \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314294501},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\n\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314296106},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314296927},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314298046},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314299139},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314302426},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gимя\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314302970},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gи\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314306036},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314307981},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G_\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314308325},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G_искомое\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314309710},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314311028},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gи\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314313451},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gиксо\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314313919},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gи\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314314725},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314317199},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_сл\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314318633},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314319362},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314320017},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                       \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314320886},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314322836},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         #\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314323254},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314324364},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314324962},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314327183},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает ко\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314331111},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314331763},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты в \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314333135},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314336533},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, г\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314338699},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где п\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314341748},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где при\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314342806},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где прису\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314343444},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присут\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314344146},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое ск\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314344578},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое с\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314347675},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314348154},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в \r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314349351},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в и\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314350375},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в из\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314351371},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"еgit status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в из\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314351930},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"еgit status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в из\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314352229},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в из\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314352431},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изме\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314353525},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменени\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314358229},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314360094},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314360805},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях ф.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314362282},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях фа.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314373522},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -Gискомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314374408},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G скомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314376430},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                         # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314524816},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314526619},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314529684},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314540822},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -з                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314550658},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314551589},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314552725},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314553049},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла b .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314556735},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла b cfvb .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314561644},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314562720},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла и .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314563312},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла и изменения в ни.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314569025},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла и изменения в них.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314571357},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты, где присутствует искомое слово в изменениях файла .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314571854},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла .\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314589792},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314591150},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314595283},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314600475},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле и изменения в нем.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314601402},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты в указанном файле .\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314617187},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммитыи изменения в нем в указанном файле .\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314674802},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в нем в указанном файле .\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314675613},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в ни в указанном файле .\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314677375},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них в указанном файле .\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314680338},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314680883},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314686462},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанн файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314697629},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314699756},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите и изменения в нем.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314700539},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314702148},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log хеш_коммита                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314714162},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log bvz                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314716527},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log                              # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314766486},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314767168},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314768141},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                             #  Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314770018},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                             # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314772452},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                                 # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314773225},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                                # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314774749},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанном коммите.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314775726},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной .\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314776164},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветк.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314779355},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветку.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314780268},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p хеш_коммита                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314780675},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                          # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314782175},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                           # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314784752},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в нем в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314786613},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в не в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314787060},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в н в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314792769},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в них в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314793236},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения  в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314793777},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанном коммите.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314804015},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанном.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314804388},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанно.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314809226},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной .\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314809551},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветк.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314810419},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке и изменения в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314811444},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты в текущей ветке  в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314811761},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммитыи изменения в текущей ветке  в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314827000},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке  в них.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314828801},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке .\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314829837},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в них у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314832653},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в  у указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314833040},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанного файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314846554},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанно файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314847731},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файла.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314850440},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файла.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314851388},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файл.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314854158},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файлов.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314900865},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файлов.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit log --grep искомое_слово                        # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639314901364},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файлов.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit log --grep искомое_слово                     # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639315002857},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
{"name":"Ветки","folderId":"ov1CCDtKz","content":[{"label":"Fragment 1","language":"powershell","value":"git status                                      # Показывает состояния репозитория.\r\n\r\ngit log                                         # Показывает коммиты в текущей ветке.\r\ngit log -p                                      # Показывает коммиты и изменения в текущей ветке.\r\ngit log имя_ветки                               # Показывает коммиты в указанной ветке.\r\ngit log -p имя_ветки                            # Показывает коммиты и изменения в указанной ветке.\r\ngit log имя_файла                               # Показывает коммиты в указанном файле.\r\ngit log -p имя_файла                            # Показывает коммиты и изменения в в указанном файле.\r\ngit log -количество_коммитов                    # Показывает указанное количество последних коммитов в текущей ветке.\r\ngit log -G искомое_слово                        # Показывает коммиты, где присутствует искомое слово в изменениях файлов.\r\ngit log -G искомое_слово -p                     # Показывает коммиты и изменения в них, где присутствует искомое слово в изменениях файла.\r\ngit log --grep искомое_слово                    # Показывает коммиты, где присутствует искомое слово в описании коммита.\r\n\r\ngit reflog                                      # Показывает список коммитов, на которых были изменения или перемещался указатель.\r\ngit branch имя_ветки HEAD@{номер_рефллога}      # Перемещает указатель на указанный коммит и востанавливает ветку, если была удалена.\r\n\r\ngit show                                        # Показывает коммиты в текущей ветке и внесенные изменения.\r\ngit show хеш_коммита                            # Показывает коммит в указанном коммите или ветке и внесенные изменения.\r\n\r\ngit diff                                        # Сравнивает текущие рабочую директорию и индексом.\r\ngit diff хеш_коммита                            # Сравнивает текущую рабочую директорию и указанный коммит.\r\ngit diff хеш_коммита имя_файла                  # Сравнивает текущую рабочую директорию и указанный коммит для указанного файла.\r\ngit diff имя_ветки имя_ветки                    # Сравнивает коммиты в указанных ветках.\r\ngit diff хеш_коммита хеш_коммита                # Сравнивает коммиты в указанных коммитах.\r\ngit diff имя_ветки имя_ветки имя_файла          # Сравнивает коммиты в указанных ветках для указанных файлов.\r\ngit diff --cached                               # Сравнивает текущие индекс и коммит.\r\n\r\ngit branch                                      # Показывает список веток.\r\ngit branch имя_ветки                            # Создает новую ветку с указанным именем на текущем коммите.\r\ngit branch -d имя_ветки                         # Удаляет ветку.\r\ngit branch -D имя_ветки                         # Принудительно удаляет ветку, с не сохранеными изменениями.\r\ngit branch -a                                   # Показывает все имеющиеся ветки в т.ч. на удаленных репозиториях.\r\ngit branch -v                                   # Показывает список веток и последний коммит в каждой.\r\ngit branch -m новое_имя_ветки                   # Переименовывает текущую локальную ветку.\r\ngit branch -m старое_имя_ветки новое_имя_ветки  # Переименовывает указанную старую ветку в локальном репозитории.\r\ngit branch -f имя_ветки хэш_коммита             # Перемещает ветку на указанный коммит, и создает ее, если ее нет.\r\ngit branch -f имя_ветки ORIG_HEAD               # Перемещает ветку на предыдущий коммит, после merge.\r\ngit branch --merged                             # Показывает ветки, уже слитые с активной.\r\ngit branch --no-merged                          # Показывает ветки, не слитые с активной.\r\n\r\ngit checkout                                    # Перемещает указатель HEAD.\r\ngit checkout -f                                 # Принудительно обновляет состояние рабочей директории из HEAD.\r\ngit checkout имя_ветки                          # Встает на указанную ветку.\r\ngit checkout имя_файла                          # Обновляет состояния файла в рабочую директорию из индекса.\r\ngit checkout -f имя_файла                       # Принудительно обновляет состояние файла из HEAD.\r\ngit checkout -                                  # Встает на предыдущую ветку.\r\ngit checkout -b имя_ветки                       # Создает новую ветку с указанным именем и встает на неё.\r\ngit checkout -B имя_ветки хеш_коммита           # Создает новую ветку с указанным именем и встает на неё. Если такая ветка существует, то передвинет ее на указанный коммит.\r\ngit checkout хеш_коммита имя_файла              # Обновляет состояния файла из указанного коммита в рабочую директорию и индекс.\r\n\r\ngit clean -df                                   # Удаляет неотслеживаемые файлы и директории.\r\ngit clean -xf                                   # Удаляет файлы? которые игнориуются через gitignore.\r\n\r\ngit merge имя_ветки                             # Влить в ветку, в которой находимся, данные из указанной ветки.\r\n"}],"tags":[],"isFavorites":false,"isDeleted":false,"createdAt":{"$$date":1638120221890},"updatedAt":{"$$date":1639315005894},"folder":{"id":"ov1CCDtKz","name":"Git commands","open":false,"defaultLanguage":"text"},"tagsPopulated":[],"_id":"vkzdnGOvJrsZcjBA"}
